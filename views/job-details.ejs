<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Find Work | Helply</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

  <style>
    /* ======================================================
    ENHANCED FIND WORK PAGE THEME
    ------------------------------------------------------
    Primary (Teal): #567c8d (Active/CTA)
    Secondary (Navy): #2f4156 (Navbar/Buttons)
    Light Background: Beige #f5efeb (Section Background)
    Base Background: White #ffffff
    ======================================================
    */

    :root {
        --primary: #567c8d; /* Teal */
        --primary-dark: #2f4156; /* Navy */
        --primary-light: #7a9cad; /* Light Teal */
        --accent-light: #c8d9e6; /* Sky Blue */
        --light: #f5efeb; /* Beige */
        --white: #ffffff; /* Pure White */
        --dark: #212529; /* Near Black */
        --gray: #6c757d;
        --border-radius: 8px;
        --transition: 0.3s;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --shadow-hover: 0 8px 20px rgba(0, 0, 0, 0.15);
    }

    /* General Reset */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
        background: var(--light); /* Beige Background */
        color: var(--dark);
        line-height: 1.6;
    }

    /* Navbar */
    .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: var(--primary-dark); /* Navy Navbar */
        padding: 15px 30px;
        color: var(--white);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        position: sticky;
        top: 0;
        z-index: 100;
    }

    .navbar .logo {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--white);
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .logo-icon {
        font-size: 1.5rem;
    }

    .navbar .nav-links {
        list-style: none;
        display: flex;
        gap: 25px;
    }

    .navbar .nav-links a {
        text-decoration: none;
        color: var(--white);
        font-weight: 500;
        transition: var(--transition);
        padding: 8px 12px;
        border-radius: var(--border-radius);
    }

    .navbar .nav-links a:hover,
    .navbar .nav-links a.active {
        background-color: rgba(255, 255, 255, 0.1);
        color: var(--white);
        text-decoration: none;
    }

    /* Hero Section */
    .hero {
        background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary) 100%);
        color: var(--white);
        padding: 60px 30px;
        text-align: center;
        margin-bottom: 30px;
    }

    .hero h1 {
        font-size: 2.5rem;
        margin-bottom: 15px;
        font-weight: 700;
    }

    .hero p {
        font-size: 1.2rem;
        max-width: 700px;
        margin: 0 auto 25px;
        opacity: 0.9;
    }

    .search-box {
        max-width: 600px;
        margin: 0 auto;
        display: flex;
        box-shadow: var(--shadow);
        border-radius: var(--border-radius);
        overflow: hidden;
    }

    .search-box input {
        flex: 1;
        padding: 15px;
        border: none;
        font-size: 1rem;
        outline: none;
    }

    .search-box button {
        background: var(--primary);
        color: white;
        border: none;
        padding: 0 25px;
        cursor: pointer;
        transition: var(--transition);
    }

    .search-box button:hover {
        background: var(--primary-light);
    }

    /* Filters Section */
    .filters {
        display: flex;
        justify-content: center;
        gap: 15px;
        padding: 20px;
        background: var(--white);
        box-shadow: var(--shadow);
        margin: 0 30px 30px;
        border-radius: var(--border-radius);
        position: relative;
        top: -15px;
    }

    .filters input,
    .filters select {
        padding: 12px 15px;
        border: 1px solid var(--accent-light);
        border-radius: var(--border-radius);
        min-width: 180px;
        outline: none;
        background-color: var(--white);
        color: var(--dark);
        transition: var(--transition);
    }

    .filters input:focus,
    .filters select:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 2px rgba(86, 124, 141, 0.2);
    }

    /* Section Header */
    .section-header {
        text-align: center;
        margin-bottom: 30px;
        padding: 0 30px;
    }

    .section-header h2 {
        font-size: 2rem;
        color: var(--primary-dark);
        margin-bottom: 10px;
    }

    .section-header p {
        color: var(--gray);
        max-width: 700px;
        margin: 0 auto;
    }

    /* Jobs Container */
    .jobs-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 25px;
        padding: 0 30px 30px;
    }

    /* Job Card */
    .job-card {
        background: var(--white);
        padding: 25px;
        border-radius: 12px;
        box-shadow: var(--shadow);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        border-top: 4px solid var(--primary);
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .job-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-hover);
    }

    .job-card h3 {
        color: var(--primary-dark);
        margin-bottom: 15px;
        font-size: 1.3rem;
    }

    .job-card p {
        margin: 8px 0;
        font-size: 0.95rem;
        flex-grow: 1;
    }

    .job-meta {
        display: flex;
        gap: 15px;
        margin: 15px 0;
        flex-wrap: wrap;
    }

    .job-tag {
        background: var(--accent-light);
        color: var(--primary-dark);
        padding: 5px 12px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .job-pay {
        font-size: 1.2rem;
        font-weight: 700;
        color: var(--primary);
        margin: 10px 0;
    }

    .job-card button {
        margin-top: auto;
        padding: 12px 20px;
        border: none;
        background: var(--primary);
        color: var(--white);
        border-radius: var(--border-radius);
        cursor: pointer;
        transition: background 0.3s;
        font-weight: 600;
        width: 100%;
    }

    .job-card button:hover {
        background: var(--primary-dark);
    }

    /* No Jobs Found */
    .jobs-container p.no-jobs {
        grid-column: 1/-1;
        text-align: center;
        font-size: 1.1rem;
        color: var(--gray);
        padding: 40px 0;
    }

    /* Modal Styling */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
        overflow: auto;
        backdrop-filter: blur(2px);
    }

    .modal-content {
        background: var(--white);
        margin: 8% auto;
        padding: 30px;
        border-radius: 12px;
        width: 80%;
        max-width: 600px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        animation: fadeIn 0.3s ease;
        position: relative;
    }

    .modal-content h2 {
        color: var(--primary-dark);
        margin-bottom: 15px;
        font-size: 1.8rem;
    }

    .modal-content p {
        margin: 12px 0;
        line-height: 1.7;
    }

    .modal-content strong {
        color: var(--primary);
    }

    .modal-content button#applyBtn {
        margin-top: 20px;
        padding: 14px 25px;
        background: var(--primary);
        border: none;
        border-radius: var(--border-radius);
        color: var(--white);
        font-size: 1rem;
        cursor: pointer;
        font-weight: 600;
        width: 100%;
        transition: background 0.3s;
    }

    .modal-content button#applyBtn:hover {
        background: var(--primary-dark);
    }

    .close {
        position: absolute;
        top: 20px;
        right: 25px;
        font-size: 1.8rem;
        font-weight: bold;
        cursor: pointer;
        color: var(--dark);
        transition: color 0.3s;
    }

    .close:hover {
        color: var(--primary-dark);
    }

    /* Footer */
    .footer {
        background: var(--primary-dark);
        color: var(--white);
        padding: 40px 30px;
        margin-top: 50px;
    }

    .footer-content {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 40px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .footer-section {
        flex: 1;
        min-width: 250px;
    }

    .footer-section h3 {
        margin-bottom: 20px;
        font-size: 1.3rem;
        color: var(--accent-light);
    }

    .footer-section p, .footer-section a {
        color: rgba(255, 255, 255, 0.8);
        margin-bottom: 10px;
        display: block;
        text-decoration: none;
        transition: color 0.3s;
    }

    .footer-section a:hover {
        color: var(--white);
    }

    .footer-bottom {
        text-align: center;
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        color: rgba(255, 255, 255, 0.7);
    }
.footer-links {
  list-style: none;
  padding: 0;
  margin: 0;
}

.footer-links li {
  margin-bottom: 0.8rem;
  list-style: none;
}

.footer-links a {
  color: var(--accent); /* Sky Blue links */
  transition: var(--transition);
}

.footer-links a:hover {
  color: white;
  padding-left: 5px;
}

    /* Animations */
    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Mobile Responsiveness */
    @media (max-width: 768px) {
        .navbar {
            flex-direction: column;
            gap: 15px;
            padding: 15px;
        }

        .navbar .nav-links {
            gap: 15px;
        }

        .hero {
            padding: 40px 20px;
        }

        .hero h1 {
            font-size: 2rem;
        }

        .filters {
            flex-direction: column;
            align-items: stretch;
            margin: 0 20px 30px;
        }

        .jobs-container {
            grid-template-columns: 1fr;
            padding: 0 20px 30px;
        }

        .footer-content {
            flex-direction: column;
            gap: 30px;
        }
 
        .modal-content {
            width: 90%;
            margin: 15% auto;
            padding: 25px;
        }
    }
  </style>
</head>
<body>
    <nav class="navbar">
       <div class="logo">
                <i class="fas fa-hands-helping logo-icon"></i>
                HELPLY
            </div>
        <ul class="nav-links">
            <li><a href="\">Home</a></li>
        </ul>
    </nav>

    <section class="hero">
        <h1>Find Your Perfect Job Match</h1>
        <p>Connect with local opportunities that fit your skills and schedule. Browse hundreds of jobs in your area.</p>
        
    </section>

    <section class="filters">
        <input type="text" id="searchInput" placeholder="Search jobs..." aria-label="Search jobs">
    </section>

    <div class="section-header">
        <h2>Available Jobs</h2>
        <p>Browse through our curated list of opportunities and find the perfect match for your skills</p>
    </div>

    <section class="jobs-container" id="jobsContainer">
        <% if (jobs.length === 0) { %>
    <p class="no-jobs">No jobs found.</p>
  <% } else { %>
    <% jobs.forEach(job => { %>
      <div class="job-card">
        <h3><%= job.Title %></h3>
        <p><%= job.Description.substring(0, 120) %>...</p>
        <div class="job-meta">
          <span class="job-tag"><%= job.Type %></span>
          <span class="job-tag"><%= job.Location %></span>
        </div>
        <p><strong>Date:</strong> <%= new Date(job.ScheduledDate).toLocaleDateString() %></p>
        <p><strong>Time:</strong> <%= job.ScheduledTime %></p>
        <p class="job-pay">₹<%= job.Salary %></p>
        <button onclick="openJobModal('<%= job.Job_ID %>')">View Details</button>
      </div>
    <% }) %>
  <% } %>

    </section>

    <div id="jobModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 id="jobTitle"></h2>
            <p id="jobDescription"></p>
            <div class="job-meta">
                <span class="job-tag" id="jobCategory"></span>
                <span class="job-tag" id="jobLocation"></span>
            </div>
            <p><strong>Date:</strong> <span id="jobDate"></span></p>
            <p><strong>Time:</strong> <span id="jobTime"></span></p>
            <p class="job-pay">₹<span id="jobPay"></span></p>
            <button id="applyBtn" data-jobid="">Apply Now</button>
        </div>
    </div>

    <footer class="footer">
        <div class="footer-content">
            <div class="footer-section">
                <h3>About Helply</h3>
                <p>Connecting skilled professionals with local opportunities. Our platform makes it easy to find work or hire help for various services.</p>
            </div>
            <div class="footer-section">
                <h3>Quick Links</h3>
                <a href="\">Home</a>
                <a href="\hire">Post a Job</a>
                
            </div>
                <div class="footer-column" id="contact">
                    <h3>Contact</h3>
                    <ul class="footer-links">
                        <li><i class="fas fa-map-marker-alt"></i> Model Engineering College,Thrikakkara,Ernankulam</li>
                        <li><i class="fas fa-phone"></i> (123) 456-7890</li>
                        <li><i class="fas fa-envelope"></i> contact@helply.com</li>
                    </ul>
                </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2023 Helply. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Use the data passed from the server-side EJS rendering
        //eslint-disable-next-line no-undef
        const jobs = <%- JSON.stringify(jobs.map(j => ({ Job_ID: j.Job_ID, Title: j.Title, Description: j.Description, Category: j.Type, Location: j.Location, Pay: j.Salary, ScheduledDate: j.ScheduledDate, ScheduledTime: j.ScheduledTime }))) %>;

        // Get elements
        const jobsContainer = document.getElementById("jobsContainer");
        const searchInput = document.getElementById("searchInput");
        const categoryFilter = document.getElementById("categoryFilter");
        const locationFilter = document.getElementById("locationFilter");
        const jobModal = document.getElementById("jobModal");
        const closeModal = document.querySelector(".close");
        const applyBtn = document.getElementById("applyBtn");

        // Find job by ID helper function
        function findJobById(jobId) {
            // Convert jobId from string to number since server-side IDs are often numbers
            return jobs.find(job => job.Job_ID == jobId);
        }

        // Open job modal (Updated to use Job_ID instead of index and link apply button)
        window.openJobModal = function(jobId) { // Made global to be accessible from EJS button
            const job = findJobById(jobId);
            if (!job) return alert('Job details not found.');

            document.getElementById("jobTitle").innerText = job.Title;
            document.getElementById("jobDescription").innerText = job.Description;
            document.getElementById("jobCategory").innerText = job.Category;
            document.getElementById("jobLocation").innerText = job.Location;
            document.getElementById("jobDate").innerText = new Date(job.ScheduledDate).toLocaleDateString();
            document.getElementById("jobTime").innerText = job.ScheduledTime;
            document.getElementById("jobPay").innerText = job.Pay;
            
            // Set the Apply button to link to the job-request route with the correct Job ID
            applyBtn.setAttribute("data-jobid", job.Job_ID);
            jobModal.style.display = "block";
        }

        // Close modal
        closeModal.onclick = () => {
            jobModal.style.display = "none";
        };
        window.onclick = (event) => {
            if (event.target === jobModal) {
                jobModal.style.display = "none";
            }
        };

        // Apply button action: Redirect to job request page
        applyBtn.onclick = () => {
            const jobId = applyBtn.getAttribute("data-jobid");
            if (jobId) {
                 // Redirect to the server-rendered job request page
                window.location.href = `/job-request/${jobId}`;
            } else {
                // IMPORTANT: Use a custom UI alert instead of native alert()
                alert("Error: Job ID not found. Please select a job.");
            }
        };

        // Initial setup to correctly map job data for filtering 
        const jobsData = jobs.map(job => ({
            Job_ID: job.Job_ID,
            title: job.Title,
            description: job.Description,
            category: job.Category,
            location: job.Location,
            pay: job.Pay,
            jobDate: job.ScheduledDate,
            jobTime: job.ScheduledTime
        }));

        // Filtering logic 
        function filterJobs() {
            const searchText = searchInput.value.toLowerCase();
            const category = categoryFilter.value;
            const location = locationFilter.value;

            const filtered = jobsData.filter(job =>
                job.title.toLowerCase().includes(searchText) &&
                (category === "" || job.category === category) &&
                (location === "" || job.location === location)
            );
            renderJobs(filtered);
        }
        
        // Renders the list dynamically based on filtering
        function renderJobs(filteredJobs) {
            jobsContainer.innerHTML = "";
            if (filteredJobs.length === 0) {
                jobsContainer.innerHTML = "<p class='no-jobs'>No jobs found matching your criteria. Try adjusting your filters.</p>";
                return;
            }

            filteredJobs.forEach(job => {
                const jobCard = document.createElement("div");
                jobCard.classList.add("job-card");
                jobCard.innerHTML = `
                    <h3>${job.title}</h3>
                    <p>${job.description.length > 120 ? job.description.slice(0, 120) + "..." : job.description}</p>
                    <div class="job-meta">
                        <span class="job-tag">${job.category}</span>
                        <span class="job-tag">${job.location}</span>
                    </div>
                    <p><strong>Date:</strong> ${new Date(job.jobDate).toLocaleDateString()}</p>
                    <p><strong>Time:</strong> ${job.jobTime}</p>
                    <p class="job-pay">₹${job.pay}</p>
                    <button onclick="openJobModal('${job.Job_ID}')" aria-label="View details for ${job.title}">View Details</button>
                `;
                jobsContainer.appendChild(jobCard);
            });
        }


        // Event listeners
        searchInput.addEventListener("input", filterJobs);
        categoryFilter.addEventListener("change", filterJobs);
        locationFilter.addEventListener("change", filterJobs);

        // Initial render to ensure filtering is active on load
        filterJobs();
    </script>
</body>
</html>